<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ebonyzhang&#39;s blog</title>
  
  <subtitle>天道酬勤</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ebonyzhang.fun/"/>
  <updated>2019-01-09T08:18:15.878Z</updated>
  <id>https://ebonyzhang.fun/</id>
  
  <author>
    <name>ebonyzhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React组件通信方式总结</title>
    <link href="https://ebonyzhang.fun/2019/01/09/react%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E6%B1%87%E6%80%BB/"/>
    <id>https://ebonyzhang.fun/2019/01/09/react组件通信方式汇总/</id>
    <published>2019-01-09T07:49:56.776Z</published>
    <updated>2019-01-09T08:18:15.878Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="React组件通信方式"><a href="#React组件通信方式" class="headerlink" title="React组件通信方式"></a>React组件通信方式</h2><h3 id="父组件向子组件通信"><a href="#父组件向子组件通信" class="headerlink" title="父组件向子组件通信"></a>父组件向子组件通信</h3><p>  父组件更新组件状态，通过props传递给子组件，子组件得到后进行更新。<br> Timer 是倒计时子组件，集成在了OrderPay父组件里，父组件向子组件传订单数据参数order对象。如下代码：</p><pre><code>&lt;Timer order={order} /&gt; //倒计时组件</code></pre><p>在子组件里直接通过props获取父组件传递过来的参数，如下：</p><pre><code>let order = this.props.order;//订单详情</code></pre><h3 id="子组件向父组件通信"><a href="#子组件向父组件通信" class="headerlink" title="子组件向父组件通信"></a>子组件向父组件通信</h3><p>  子组件更新组件状态，通过回调函数的方式传递给父组件。<br>  子组件调用父组件通过props传给它的函数更新父组件state，进而完成子组件向父组件的通讯。</p><p><strong>先看父组件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import logo from &apos;./logo.svg&apos;;</span><br><span class="line">import &apos;./App.css&apos;;</span><br><span class="line"></span><br><span class="line">//导入子组件</span><br><span class="line">import Child from &apos;./child.js&apos;; </span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line">  constructor(props)&#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      msg: &apos;父组件初始msg&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //父组件回调函数，更新state，进而更新父组件。</span><br><span class="line">  callback=(msg)=&gt;&#123;</span><br><span class="line">    // setState方法,修改msg参数,值是由子组件传过来。</span><br><span class="line">    this.setState(&#123;msg&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">        &lt;p&gt;子组件传值实验: &#123;this.state.msg&#125;&lt;/p&gt;</span><br><span class="line">        &lt;Child callback=&#123;this.callback&#125; &gt;&lt;/Child&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure></p><p><strong>再看子组件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">class Child extends React.Component&#123;</span><br><span class="line">constructor(props)&#123;</span><br><span class="line">      super(props);</span><br><span class="line">    this.state=&#123;</span><br><span class="line">    msg: &apos;子组件msg传值&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //通过props调用回调函数传值</span><br><span class="line">    trans=()=&gt;&#123;</span><br><span class="line">        this.props.callback(this.state.msg);</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;button onClick=&#123;this.trans&#125;&gt;激发trans事件，传值给父组件&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Child;</span><br></pre></td></tr></table></figure><p><strong>效果</strong><br><img src="https://img-blog.csdnimg.cn/2019010910104894.png" alt="父组件初始展示"></p><p><img src="https://img-blog.csdnimg.cn/20190109101112169.png" alt="子组件更新后展示"></p><h3 id="跨级组件间通信"><a href="#跨级组件间通信" class="headerlink" title="跨级组件间通信"></a>跨级组件间通信</h3><p>  举个例子react-redux的<provider>，也是通过Context提供一个全局态的store。还有用户信息的使用，也可以通过context中传递数据。</provider></p><p>  通过props或state传值比较麻烦，context提供了一种组件之间共享数据的方式，可以避免数据在组件树上逐层传递，也就是用Context来实现跨层级的组件数据传递。</p><p>这篇文章写得非常好，看完就能理解context，上手实验更能理解透彻，毕竟最后都要应用起来。<br><a href="https://www.jianshu.com/p/eba2b76b290b?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">https://www.jianshu.com/p/eba2b76b290b?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a></p><blockquote><p>Context API的使用基于生产者消费者模式。生产者一方，通过组件静态属性childContextTypes声明，然后通过实例方法getChildContext()创建Context对象。消费者一方，通过组件静态属性contextTypes申请要用到的Context属性，然后通过实例的context访问Context的属性。</p></blockquote><p><strong>生产者</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &apos;./App.css&apos;;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;;</span><br><span class="line">import CppComponent from &apos;./Cpp.js&apos;;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line"></span><br><span class="line">  constructor(props)&#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //生产者</span><br><span class="line">  //Context生产者，通过静态属性childContextTypes声明提供给子组件的Context对象的属性，</span><br><span class="line">  static childContextTypes = &#123;</span><br><span class="line">    propA: PropTypes.string</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //实例getChildContext方法，返回Context对象</span><br><span class="line">  getChildContext () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      propA: &apos;propA&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;BppComponent /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BppComponent extends React.Component &#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    return &lt;CppComponent /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure></p><p><strong>消费者</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 第三层有A（生产者）层直接传递数据到此层C（消费者）</span><br><span class="line"> */</span><br><span class="line">class CppComponent extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">   //消费者</span><br><span class="line">   //子组件需要通过一个静态属性contextTypes声明后，才可以访问父组件Context对象的属性</span><br><span class="line">  static contextTypes = &#123;</span><br><span class="line">    propA: PropTypes.string</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">      &lt;p&gt;从生产者传递过来的属性A：&#123;this.context.propA&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    ) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default CppComponent;</span><br></pre></td></tr></table></figure><p>react升级后，Context的新API做了变更。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Context&lt;T&gt; = &#123;</span><br><span class="line">     Provider: Provider&lt;T&gt;,</span><br><span class="line">     Consumer: Consumer&lt;T&gt;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &apos;./App.css&apos;;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;;</span><br><span class="line">import CppComponent from &apos;./Cpp.js&apos;;</span><br><span class="line"></span><br><span class="line">const CommContext = React.createContext(&#123;</span><br><span class="line">  a: &apos;aaaaa&apos;,</span><br><span class="line">  b: &apos;bbbbb&apos;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line"></span><br><span class="line">  //父组件</span><br><span class="line">  constructor(props)&#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render() &#123;    </span><br><span class="line">    return(</span><br><span class="line">      &lt;CommContext.Provider&gt;</span><br><span class="line">        &lt;BppComponent /&gt;</span><br><span class="line">      &lt;/CommContext.Provider&gt;</span><br><span class="line">    )  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BppComponent extends React.Component &#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;CppComponent&gt;context跨层级传参实验&lt;/CppComponent&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p><strong>消费者</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 通过静态方法React.createContext()创建一个Context对象，</span><br><span class="line"> * 这个Context对象包含两个组件，&lt;Provider /&gt;和&lt;Consumer /&gt;</span><br><span class="line"> */</span><br><span class="line">const CommContext = React.createContext(&#123;</span><br><span class="line">  a: &apos;newaaaaa&apos;,</span><br><span class="line">  b: &apos;newbbbbb&apos;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 第三层有A（生产者）层直接传递数据到此层C（消费者）</span><br><span class="line"> */</span><br><span class="line">class CppComponent extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">  //消费者</span><br><span class="line">  render () &#123;</span><br><span class="line">    return(</span><br><span class="line">      &lt;CommContext.Consumer&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          context =&gt; (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &#123;this.props.children&#125; &lt;br/&gt;</span><br><span class="line">              参数a: &#123;context.a&#125; &lt;br/&gt;</span><br><span class="line">              参数b: &#123;context.b&#125; </span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">      &lt;/CommContext.Consumer&gt;</span><br><span class="line">    ) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default CppComponent;</span><br></pre></td></tr></table></figure><p><strong>效果</strong><br><img src="https://img-blog.csdnimg.cn/20190109140726790.png" alt="context越级传参"></p><p><strong>其他使用方式</strong><br>构造方法：</p><pre><code>constructor(props, context)</code></pre><p>生命周期：</p><pre><code>componentWillReceiveProps(nextProps, nextContext)shouldComponentUpdate(nextProps, nextState, nextContext)componetWillUpdate(nextProps, nextState, nextContext)</code></pre><blockquote><p>注入式的组件，类似背景、语言这种控制全局的变量，可使用context。</p></blockquote><h3 id="非嵌套组件间通信"><a href="#非嵌套组件间通信" class="headerlink" title="非嵌套组件间通信"></a>非嵌套组件间通信</h3><blockquote><p>非嵌套组件: 就是没有任何包含关系的组件,包括兄弟组件以及不再同一个父级的非兄弟组件。<br>使用事件订阅，即一个发布者，一个或多个订阅者。</p></blockquote><h4 id="安装event"><a href="#安装event" class="headerlink" title="安装event"></a>安装event</h4><pre><code>npm install event -save</code></pre><h4 id="新建Evt-js，导入events"><a href="#新建Evt-js，导入events" class="headerlink" title="新建Evt.js，导入events"></a>新建Evt.js，导入events</h4><pre><code>import {EventEmitter} from &apos;events&apos;;export default new EventEmitter();   </code></pre><h4 id="发布者"><a href="#发布者" class="headerlink" title="发布者"></a>发布者</h4><p>通过emit事件触发方法，发布订阅消息给订阅者。<br><strong>发布者</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &apos;./App.css&apos;;</span><br><span class="line">import PropTypes from &apos;prop-types&apos;;</span><br><span class="line">import Custom1 from &apos;./Custom1.js&apos;;</span><br><span class="line">import Custom2 from &apos;./Custom2.js&apos;;</span><br><span class="line">import emitter from &apos;./Evt.js&apos;;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line"></span><br><span class="line">  constructor()&#123;</span><br><span class="line">    super();</span><br><span class="line">    this.handleClick = this.handleClick.bind(this);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick() &#123;</span><br><span class="line">    //emit事件触发方法,过事件名称找对应的事件处理函数callCustom，将事件处理函数作为参数传入</span><br><span class="line">    emitter.emit(&apos;callCustom&apos;, &apos;Hello 我来发消息了&apos;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;    </span><br><span class="line">    return(</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;br/&gt;</span><br><span class="line">        &lt;button onClick = &#123;this.handleClick&#125;&gt;点击发布事件&lt;/button&gt;</span><br><span class="line">        &lt;Custom1 /&gt;</span><br><span class="line">        &lt;Custom2 /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">     </span><br><span class="line">    )  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure></p><h4 id="订阅者"><a href="#订阅者" class="headerlink" title="订阅者"></a>订阅者</h4><p>Custom1 和 Custom2<br>通过emitter.<strong>addListener</strong>(事件名称,函数名)方法，进行事件监听(订阅)。<br>通过emitter.<strong>removeListener</strong>(事件名称,函数名)方法 ，进行事件销毁(取消订阅)</p><p><strong>订阅者1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import emitter from &apos;./Evt.js&apos;;</span><br><span class="line"></span><br><span class="line">class Custom1 extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">  constructor()&#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state= &#123;</span><br><span class="line">      msg:&apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount () &#123; //在组件挂载完成后声明一个自定义事件</span><br><span class="line">    emitter.addListener(&apos;callCustom&apos;, (msg) =&gt; &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        msg: &apos;Custom1收到消息--&apos;+msg</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount () &#123; //组件销毁前移除事件监听</span><br><span class="line">    emitter.removeListener(&apos;callCustom&apos;, (msg) =&gt; &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        msg: &apos;Custom1即将销毁此消息--&apos;+ msg</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //订阅者1消息显示</span><br><span class="line">  render () &#123;</span><br><span class="line">     return(&lt;p style=&#123;&#123;color:&apos;red&apos;&#125;&#125;&gt;</span><br><span class="line">        &#123;this.state.msg&#125;</span><br><span class="line">      &lt;/p&gt;) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default Custom1;</span><br></pre></td></tr></table></figure><p><strong>订阅者2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import emitter from &apos;./Evt.js&apos;;</span><br><span class="line"></span><br><span class="line">class Custom2 extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">  constructor()&#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state= &#123;</span><br><span class="line">      msg:&apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount () &#123; //在组件挂载完成后声明一个自定义事件</span><br><span class="line">    emitter.addListener(&apos;callCustom&apos;, (msg) =&gt; &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        msg: &apos;Custom2收到消息--&apos;+msg</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount () &#123; //组件销毁前移除事件监听</span><br><span class="line">    emitter.removeListener(&apos;callCustom&apos;, (msg) =&gt; &#123;</span><br><span class="line">      this.setState(&#123;</span><br><span class="line">        msg: &apos;Custom2即将销毁此消息--&apos;+ msg</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //订阅者2消息显示</span><br><span class="line">  render () &#123;</span><br><span class="line">    return(&lt;p style=&#123;&#123;color:&apos;blue&apos;&#125;&#125;&gt;&#123;this.state.msg&#125;&lt;/p&gt;) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default Custom2;</span><br></pre></td></tr></table></figure><p>运行效果如下：<br>发布者发布消息前<br><img src="https://img-blog.csdnimg.cn/20190109154003970.png" alt="发布者发布消息前"><br>订阅者接收消息后<br><img src="https://img-blog.csdnimg.cn/20190109154036101.png" alt="订阅者接收消息后"></p><blockquote><p>文献资料<br>非嵌套组件通信详解<br><a href="https://blog.csdn.net/bbgdebb/article/details/79006277" target="_blank" rel="noopener">https://blog.csdn.net/bbgdebb/article/details/79006277</a><br>node.js源码解析-events<br><a href="https://blog.csdn.net/leoleocs/article/details/50162065" target="_blank" rel="noopener">https://blog.csdn.net/leoleocs/article/details/50162065</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="React" scheme="https://ebonyzhang.fun/categories/React/"/>
    
    
      <category term="React" scheme="https://ebonyzhang.fun/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>接口问题以及解决方案汇总</title>
    <link href="https://ebonyzhang.fun/2019/01/05/%E6%8E%A5%E5%8F%A3%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%B1%87%E6%80%BB/"/>
    <id>https://ebonyzhang.fun/2019/01/05/接口问题以及解决方案汇总/</id>
    <published>2019-01-05T05:56:16.827Z</published>
    <updated>2019-01-09T08:13:00.855Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="接口问题以及解决方案汇总"><a href="#接口问题以及解决方案汇总" class="headerlink" title="接口问题以及解决方案汇总"></a>接口问题以及解决方案汇总</h2><h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><blockquote><p>省内接口转为全国统一接口，作为接口中转，主要是承上启下的作用。<br>保持前端请求以及参数不变的情况下，业务逻辑集中处理；<br>提供给第三方或者四方?!调用；<br>当接口变更时只更改当前接口项目即可。</p></blockquote><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p><code>java.net.URISyntaxException //Http Get请求报出此次错误。</code></p><p><strong>问题原因</strong>：</p><p><em>第三方接口需要将参数部分进行编码后提交。 原接口进行了编码传到中转接口这里仍然需要获取并重新编码传给第三方。</em></p><p><strong>解决办法</strong>：</p><p> 重新进行编码<br><code>URLEncoder.encode(param.toJSONString(),&quot;utf-8&quot;)</code></p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><pre><code>关于接口请求参数JSON格式的重新封装问题。</code></pre><p><strong>问题原因</strong>：</p><p><em>请求参数param是json格式的，接收过来的参数不能直接toJSONString，编码后传给第三方</em></p><p><strong>解决办法</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (map.containsKey(&quot;param&quot;)) &#123;</span><br><span class="line">JSONObject param = JSONObject.parseObject((String)map.get(&quot;param&quot;));</span><br><span class="line">url = url + &quot;&amp;param=&quot; + URLEncoder.encode(param.toJSONString(),&quot;utf-8&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>针对接口调用做简单的记录，方便今后查看。<br>其实最好的框架是适合项目本身的，与高级或所谓低端无关，越是简单的反而更能解决问题，提升效率。</p></blockquote><blockquote><p>是非入耳君须忍，半作痴呆半作聋。 </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="接口" scheme="https://ebonyzhang.fun/categories/%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="接口" scheme="https://ebonyzhang.fun/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Hexo主题与配置优化</title>
    <link href="https://ebonyzhang.fun/2019/01/03/Hexo%E4%B8%BB%E9%A2%98%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/"/>
    <id>https://ebonyzhang.fun/2019/01/03/Hexo主题与配置优化/</id>
    <published>2019-01-03T09:19:36.976Z</published>
    <updated>2019-01-03T09:29:03.492Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="next主题配置"><a href="#next主题配置" class="headerlink" title="next主题配置"></a>next主题配置</h2><pre><code>https://hexo.io/themes/主题选择，本文是next主题安装配置以及优化。</code></pre><h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>在博客根目录，打开git bash, git clone https://github.com/theme-next/hexo-theme-next themes / next 安装完毕后在站点目录下themes文件夹生成next主题文件夹。</code></pre><h3 id="站点开启主题"><a href="#站点开启主题" class="headerlink" title="站点开启主题"></a>站点开启主题</h3><pre><code>在站点根目录设置主题：next  </code></pre><p> <img src="https://img-blog.csdnimg.cn/20190103115249653.png" alt="在这里插入图片描述"></p><h3 id="next主题中文设置"><a href="#next主题中文设置" class="headerlink" title="next主题中文设置"></a>next主题中文设置</h3><pre><code>站点配置文件_config.ymllanguage: zh-Hans  </code></pre><h3 id="Scheme-外观设置"><a href="#Scheme-外观设置" class="headerlink" title="Scheme 外观设置"></a>Scheme 外观设置</h3><pre><code>这里选择了双栏PiscesMuse黑白主调，大量留白。Mist是Muse的紧凑版本，整洁有序的单栏外观Gemini左侧网站信息及目录，块+片段结构布局</code></pre><p> <img src="https://img-blog.csdnimg.cn/2019010314322624.png" alt="在这里插入图片描述"></p><h3 id="新增菜单设置"><a href="#新增菜单设置" class="headerlink" title="新增菜单设置"></a>新增菜单设置</h3><pre><code>第一步：hexo new page &apos;name&apos; # name分别为tags、categories、about具体生成如下：hexo new page &apos;tags&apos; #创建tags标签子目录hexo new page &apos;categories&apos; #创建categories分类子目录hexo new page &apos;about&apos; #创建about关于子目录第二步：修改这tags和categories文件夹中的index.md，设置如下：</code></pre><p>  <img src="https://img-blog.csdnimg.cn/20190103142950806.png" alt="在这里插入图片描述"> <img src="https://img-blog.csdnimg.cn/20190103142935429.png" alt="在这里插入图片描述"></p><h2 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h2><h3 id="公益404"><a href="#公益404" class="headerlink" title="公益404"></a>公益404</h3><pre><code>将公益404一份在网页丢失时候。另外还放在了关于里面。在网页丢失时候：第一步：创建404页面hexo new page 404 ; 第二步：在站点source文件夹下创建404.html，将如下代码粘贴进去，保存！</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;]\</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;404&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h3><pre><code>注册一个网易账号，生成一个自己的一个歌单，加入自己喜欢的音乐。在网易云插件里，嵌入iframe(可以根据自己设定调整，然后复制代码)hexo配置，在next主题下/layout/_macro/sidebar.swig文件里添加复制的代码即可。配置显示在左侧栏中</code></pre><h3 id="点击桃心"><a href="#点击桃心" class="headerlink" title="点击桃心"></a>点击桃心</h3><pre><code>第一步： 在 /themes/next/source/js/src 文件夹下创建 clklove.js 将如下代码粘贴进去，保存！</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure><pre><code>第二步：在主题文件夹下 \themes\next\layout\_layout.swig文件末尾，引入创建的js文件，如下：</code></pre><p>   <img src="https://img-blog.csdnimg.cn/20190103141814805.png" alt="在这里插入图片描述"></p><h3 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h3><pre><code>第一步：引入文件</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><pre><code>第二步：在next主题配置文件_config.yml设置canvas_nest: true</code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><pre><code>第一步：安装插件npm install hexo-generator-searchdb --save第二步：站点配置文件修改</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><pre><code>第三步：主题配置文件修改</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  unescape: false</span><br></pre></td></tr></table></figure><h3 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h3><pre><code>第一步：安装插件npm install hexo-generator-feed第二步：站点配置_config.yml配置文件添加以下代码：</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">type: atom</span><br><span class="line">path: atom.xml</span><br><span class="line">limit: 20</span><br></pre></td></tr></table></figure><pre><code>第三步：主题配置在themes目录下的_config.yml配置如下rss: /atom.xml</code></pre><hr><blockquote><p>进学致和，行方思远。——字严 </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="hexo" scheme="https://ebonyzhang.fun/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://ebonyzhang.fun/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo基础</title>
    <link href="https://ebonyzhang.fun/2018/12/29/%E4%BD%BF%E7%94%A8hexo+GitHub+%E9%98%BF%E9%87%8C%E4%BA%91%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <id>https://ebonyzhang.fun/2018/12/29/使用hexo+GitHub+阿里云搭建个人网站/</id>
    <published>2018-12-29T09:40:11.988Z</published>
    <updated>2019-01-03T09:23:41.756Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="关于hexo"><a href="#关于hexo" class="headerlink" title="关于hexo"></a>关于hexo</h2><pre><code>https://hexo.io/zh-cn/docs/hexo官方文档连接地址</code></pre><h2 id="安装node和git"><a href="#安装node和git" class="headerlink" title="安装node和git"></a>安装node和git</h2><p> 请自行从网上查找适合自己系统和版本进行安装。</p><h3 id="node安装"><a href="#node安装" class="headerlink" title="node安装"></a>node安装</h3><pre><code>https://nodejs.org/zh-cn/自行配置Node.js环境</code></pre><h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><pre><code>git 下载 https://git-scm.com/download</code></pre><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="安装与启动部署"><a href="#安装与启动部署" class="headerlink" title="安装与启动部署"></a>安装与启动部署</h3><pre><code>npm install -g hexo-cli  //hexo插件安装hexo init blob //初始化hexo文件夹blobcd blobnpm installhexo generate //可简写为hexo ghexo sever //可简写为hexo s</code></pre><p><img src="https://img-blog.csdnimg.cn/20181229161737386.png" alt="启动服务"><br>    访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> </p><pre><code>Hello World </code></pre><h3 id="上传GitHub"><a href="#上传GitHub" class="headerlink" title="上传GitHub"></a>上传GitHub</h3><h3 id="安装github插件"><a href="#安装github插件" class="headerlink" title="安装github插件"></a>安装github插件</h3><pre><code>npm install hexo-deployer-git --save //安装插件</code></pre><h3 id="github注册以及配置"><a href="#github注册以及配置" class="headerlink" title="github注册以及配置"></a>github注册以及配置</h3><pre><code>(1) 没有GitHub的访问以下网站注册一个账户    https://github.com(2) 建立资源库，例如blob(3) 在hexo中配置该仓库地址</code></pre><h3 id="本地站点github相关配置"><a href="#本地站点github相关配置" class="headerlink" title="本地站点github相关配置"></a>本地站点github相关配置</h3><pre><code>找到hexo安装目录blob文件夹，在站点配置文件_config.yml里修改如下配置：deploy:    type: git  repository: git@github.com:你的Github账户/仓库.git  branch: master</code></pre><h3 id="部署静态文件到github"><a href="#部署静态文件到github" class="headerlink" title="部署静态文件到github"></a>部署静态文件到github</h3><pre><code>通过git bash部署到github上hexo deploy //可简写为 hexo d </code></pre><h3 id="域名关联gitpage"><a href="#域名关联gitpage" class="headerlink" title="域名关联gitpage"></a>域名关联gitpage</h3><pre><code>(1) 阿里云域名配置    在阿里云域名模块解析域名配置        将记录类型设置为CNAME；        记录值修改为 yourname.github.io    在hexo安装目录中找到source文件夹        新建CNAME文件，没有后缀。        将你的域名放在新建的CNAME文件中。(2) GitHub Pages配置    在blob资源仓库中Setting里，  下拉找到GitHub Pages部分    配置 Custom domain，将你的域名填写进去，点击save。</code></pre><p><img src="https://img-blog.csdnimg.cn/20181229170710433.png" alt="github pages"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre><code>//清除缓存hexo clean //生成静态网页hexo g//部署到githexo d//本地服务启动hexo s</code></pre><hr><blockquote><p>比较简略，大体流程就是这些，个人觉得在自己动手查找过程会有更多的收获。<br>纸上得来终觉浅，觉知此事要躬行。——陆游</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="hexo" scheme="https://ebonyzhang.fun/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://ebonyzhang.fun/tags/hexo/"/>
    
  </entry>
  
</feed>
